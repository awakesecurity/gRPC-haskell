# This file was automatically generated by stack init
# For more information, see: http://docs.haskellstack.org/en/stable/yaml_configuration/

# Specifies the GHC version and set of packages available (e.g., lts-3.5, nightly-2015-09-21, ghc-7.10.2)
resolver: lts-19.16

# Local packages, usually specified by relative directory name
packages:
- '.'
- 'core'


# Override default flag values for local packages and extra-deps
flags: {}

# Extra package databases containing global packages
extra-package-dbs: []


extra-deps:

- git: git@github.com:awakesecurity/proto3-suite.git
  # “v0.5.0” tag, as in nixpkgs pin
  commit: 54662fa765afc4a581edc29e12ea3c5bf45da158

- git: git@github.com:awakesecurity/proto3-wire.git
  # Trying to take “v1.2.2”, as in nixpkgs, but in this repo there’s only
  # “1.4.0” tag. Found a commit with title “Version 1.2.1 → 1.2.2” assuming it’s
  # the one I’m looking for.
  commit: 25b378b8e663a9f5305a648b826200e88e5d11b8


# Fix dependency bounds for “proto3-suite” and “proto3-wire”.
# It seems there is no way with Stack to apply a patch for a dependency
# as it’s done in Nix.
allow-newer: true


# Control whether we use the GHC we find on the path
#
# NB: It is important that this is `false`, because we do NOT want `stack` to
# use our nix-built ghc which is used in the `nix`/`cabal` worfklows, we want it
# to use its own LTS version. Setting this to `true` and then trying to run
# tests via `stack` inside the `nix-shell` will result in some cryptic package
# collison messages: e.g., there's a `text` in the nix-built ghc which are
# using, and another `text` in what `stack` wants to use.
system-ghc: false

# Require a specific version of stack, using version ranges
# require-stack-version: -any # Default
# require-stack-version: >= 1.0.0

# Override the architecture used by stack, especially useful on Windows
# arch: i386
# arch: x86_64

# Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]

# Allow a newer minor version of GHC than the snapshot specifies
# compiler-check: newer-minor

# NB: We really only rely on Nix integration for creating the environment for
# running tests. Thus `stack --nix test` can be used to run the tests. However,
# since this will rebuild a custom ghc often due to the structure of
# release.nix, it is suggested that `nix-shell release.nix -A grpc-haskell.env`
# is used and then `stack test` (sans `--nix`) is used during development and
# test iterations.
nix:
  enable: false
  pure: false
  shell-file: release.nix
  nix-shell-options: ["-A", "stack-env"]
